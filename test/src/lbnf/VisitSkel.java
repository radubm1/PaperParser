// File generated by the BNF Converter (bnfc 2.9.5).

package lbnf;

/*** Visitor Design Pattern Skeleton. ***/

/*
 * This implements the common visitor design pattern. Tests show it to be
 * slightly less efficient than the instanceof method, but easier to use.
 * Replace the R and A parameters with the desired return and context types.
 */

public class VisitSkel {
	public class GrammarVisitor<R, A> implements lbnf.Absyn.Grammar.Visitor<R, A> {
		public R visit(lbnf.Absyn.MkGrammar p, A arg) { /* Code for MkGrammar goes here */
			for (lbnf.Absyn.Def x : p.listdef_) {
				x.accept(new DefVisitor<R, A>(), arg);
			}
			return null;
		}
	}

	public class DefVisitor<R, A> implements lbnf.Absyn.Def.Visitor<R, A> {
		public R visit(lbnf.Absyn.Rule p, A arg) { /* Code for Rule goes here */
			p.label_.accept(new LabelVisitor<R, A>(), arg);
			p.cat_.accept(new CatVisitor<R, A>(), arg);
			for (lbnf.Absyn.Item x : p.listitem_) {
				x.accept(new ItemVisitor<R, A>(), arg);
			}
			return null;
		}

		public R visit(lbnf.Absyn.Comment p, A arg) { /* Code for Comment goes here */
			// p.string_;
			return null;
		}

		public R visit(lbnf.Absyn.Comments p, A arg) { /* Code for Comments goes here */
			// p.string_1;
			// p.string_2;
			return null;
		}

		public R visit(lbnf.Absyn.Internal p, A arg) { /* Code for Internal goes here */
			p.label_.accept(new LabelVisitor<R, A>(), arg);
			p.cat_.accept(new CatVisitor<R, A>(), arg);
			for (lbnf.Absyn.Item x : p.listitem_) {
				x.accept(new ItemVisitor<R, A>(), arg);
			}
			return null;
		}

		public R visit(lbnf.Absyn.Token p, A arg) { /* Code for Token goes here */
			// p.ident_;
			p.reg_.accept(new RegVisitor<R, A>(), arg);
			return null;
		}

		public R visit(lbnf.Absyn.PosToken p, A arg) { /* Code for PosToken goes here */
			// p.ident_;
			p.reg_.accept(new RegVisitor<R, A>(), arg);
			return null;
		}

		public R visit(lbnf.Absyn.Entryp p, A arg) { /* Code for Entryp goes here */
			for (String x : p.listident_) {
				// x;
			}
			return null;
		}

		public R visit(lbnf.Absyn.Separator p, A arg) { /* Code for Separator goes here */
			p.minimumsize_.accept(new MinimumSizeVisitor<R, A>(), arg);
			p.cat_.accept(new CatVisitor<R, A>(), arg);
			// p.string_;
			return null;
		}

		public R visit(lbnf.Absyn.Terminator p, A arg) { /* Code for Terminator goes here */
			p.minimumsize_.accept(new MinimumSizeVisitor<R, A>(), arg);
			p.cat_.accept(new CatVisitor<R, A>(), arg);
			// p.string_;
			return null;
		}

		public R visit(lbnf.Absyn.Coercions p, A arg) { /* Code for Coercions goes here */
			// p.ident_;
			// p.integer_;
			return null;
		}

		public R visit(lbnf.Absyn.Rules p, A arg) { /* Code for Rules goes here */
			// p.ident_;
			for (lbnf.Absyn.RHS x : p.listrhs_) {
				x.accept(new RHSVisitor<R, A>(), arg);
			}
			return null;
		}

		public R visit(lbnf.Absyn.Layout p, A arg) { /* Code for Layout goes here */
			for (String x : p.liststring_) {
				// x;
			}
			return null;
		}

		public R visit(lbnf.Absyn.LayoutStop p, A arg) { /* Code for LayoutStop goes here */
			for (String x : p.liststring_) {
				// x;
			}
			return null;
		}

		public R visit(lbnf.Absyn.LayoutTop p, A arg) { /* Code for LayoutTop goes here */
			return null;
		}
	}

	public class ItemVisitor<R, A> implements lbnf.Absyn.Item.Visitor<R, A> {
		public R visit(lbnf.Absyn.Terminal p, A arg) { /* Code for Terminal goes here */
			// p.string_;
			return null;
		}

		public R visit(lbnf.Absyn.NTerminal p, A arg) { /* Code for NTerminal goes here */
			p.cat_.accept(new CatVisitor<R, A>(), arg);
			return null;
		}
	}

	public class CatVisitor<R, A> implements lbnf.Absyn.Cat.Visitor<R, A> {
		public R visit(lbnf.Absyn.ListCat p, A arg) { /* Code for ListCat goes here */
			p.cat_.accept(new CatVisitor<R, A>(), arg);
			return null;
		}

		public R visit(lbnf.Absyn.IdCat p, A arg) { /* Code for IdCat goes here */
			// p.ident_;
			return null;
		}
	}

	public class LabelVisitor<R, A> implements lbnf.Absyn.Label.Visitor<R, A> {
		public R visit(lbnf.Absyn.LabNoP p, A arg) { /* Code for LabNoP goes here */
			p.labelid_.accept(new LabelIdVisitor<R, A>(), arg);
			return null;
		}

		public R visit(lbnf.Absyn.LabP p, A arg) { /* Code for LabP goes here */
			p.labelid_.accept(new LabelIdVisitor<R, A>(), arg);
			for (lbnf.Absyn.ProfItem x : p.listprofitem_) {
				x.accept(new ProfItemVisitor<R, A>(), arg);
			}
			return null;
		}

		public R visit(lbnf.Absyn.LabPF p, A arg) { /* Code for LabPF goes here */
			p.labelid_1.accept(new LabelIdVisitor<R, A>(), arg);
			p.labelid_2.accept(new LabelIdVisitor<R, A>(), arg);
			for (lbnf.Absyn.ProfItem x : p.listprofitem_) {
				x.accept(new ProfItemVisitor<R, A>(), arg);
			}
			return null;
		}

		public R visit(lbnf.Absyn.LabF p, A arg) { /* Code for LabF goes here */
			p.labelid_1.accept(new LabelIdVisitor<R, A>(), arg);
			p.labelid_2.accept(new LabelIdVisitor<R, A>(), arg);
			return null;
		}
	}

	public class LabelIdVisitor<R, A> implements lbnf.Absyn.LabelId.Visitor<R, A> {
		public R visit(lbnf.Absyn.Id p, A arg) { /* Code for Id goes here */
			// p.ident_;
			return null;
		}

		public R visit(lbnf.Absyn.Wild p, A arg) { /* Code for Wild goes here */
			return null;
		}

		public R visit(lbnf.Absyn.ListE p, A arg) { /* Code for ListE goes here */
			return null;
		}

		public R visit(lbnf.Absyn.ListCons p, A arg) { /* Code for ListCons goes here */
			return null;
		}

		public R visit(lbnf.Absyn.ListOne p, A arg) { /* Code for ListOne goes here */
			return null;
		}
	}

	public class ProfItemVisitor<R, A> implements lbnf.Absyn.ProfItem.Visitor<R, A> {
		public R visit(lbnf.Absyn.ProfIt p, A arg) { /* Code for ProfIt goes here */
			for (lbnf.Absyn.IntList x : p.listintlist_) {
				x.accept(new IntListVisitor<R, A>(), arg);
			}
			for (Integer x : p.listinteger_) {
				// x;
			}
			return null;
		}
	}

	public class IntListVisitor<R, A> implements lbnf.Absyn.IntList.Visitor<R, A> {
		public R visit(lbnf.Absyn.Ints p, A arg) { /* Code for Ints goes here */
			for (Integer x : p.listinteger_) {
				// x;
			}
			return null;
		}
	}

	public class RHSVisitor<R, A> implements lbnf.Absyn.RHS.Visitor<R, A> {
		public R visit(lbnf.Absyn.MkRHS p, A arg) { /* Code for MkRHS goes here */
			for (lbnf.Absyn.Item x : p.listitem_) {
				x.accept(new ItemVisitor<R, A>(), arg);
			}
			return null;
		}
	}

	public class MinimumSizeVisitor<R, A> implements lbnf.Absyn.MinimumSize.Visitor<R, A> {
		public R visit(lbnf.Absyn.MNonempty p, A arg) { /* Code for MNonempty goes here */
			return null;
		}

		public R visit(lbnf.Absyn.MEmpty p, A arg) { /* Code for MEmpty goes here */
			return null;
		}
	}

	public class RegVisitor<R, A> implements lbnf.Absyn.Reg.Visitor<R, A> {
		public R visit(lbnf.Absyn.RSeq p, A arg) { /* Code for RSeq goes here */
			p.reg_1.accept(new RegVisitor<R, A>(), arg);
			p.reg_2.accept(new RegVisitor<R, A>(), arg);
			return null;
		}

		public R visit(lbnf.Absyn.RAlt p, A arg) { /* Code for RAlt goes here */
			p.reg_1.accept(new RegVisitor<R, A>(), arg);
			p.reg_2.accept(new RegVisitor<R, A>(), arg);
			return null;
		}

		public R visit(lbnf.Absyn.RMinus p, A arg) { /* Code for RMinus goes here */
			p.reg_1.accept(new RegVisitor<R, A>(), arg);
			p.reg_2.accept(new RegVisitor<R, A>(), arg);
			return null;
		}

		public R visit(lbnf.Absyn.RStar p, A arg) { /* Code for RStar goes here */
			p.reg_.accept(new RegVisitor<R, A>(), arg);
			return null;
		}

		public R visit(lbnf.Absyn.RPlus p, A arg) { /* Code for RPlus goes here */
			p.reg_.accept(new RegVisitor<R, A>(), arg);
			return null;
		}

		public R visit(lbnf.Absyn.ROpt p, A arg) { /* Code for ROpt goes here */
			p.reg_.accept(new RegVisitor<R, A>(), arg);
			return null;
		}

		public R visit(lbnf.Absyn.REps p, A arg) { /* Code for REps goes here */
			return null;
		}

		public R visit(lbnf.Absyn.RChar p, A arg) { /* Code for RChar goes here */
			// p.char_;
			return null;
		}

		public R visit(lbnf.Absyn.RAlts p, A arg) { /* Code for RAlts goes here */
			// p.string_;
			return null;
		}

		public R visit(lbnf.Absyn.RSeqs p, A arg) { /* Code for RSeqs goes here */
			// p.string_;
			return null;
		}

		public R visit(lbnf.Absyn.RDigit p, A arg) { /* Code for RDigit goes here */
			return null;
		}

		public R visit(lbnf.Absyn.RLetter p, A arg) { /* Code for RLetter goes here */
			return null;
		}

		public R visit(lbnf.Absyn.RUpper p, A arg) { /* Code for RUpper goes here */
			return null;
		}

		public R visit(lbnf.Absyn.RLower p, A arg) { /* Code for RLower goes here */
			return null;
		}

		public R visit(lbnf.Absyn.RAny p, A arg) { /* Code for RAny goes here */
			return null;
		}
	}
}
