// File generated by the BNF Converter (bnfc 2.9.5).

package lbnf;

/**
 * Composition Visitor
 */

public class ComposVisitor<A> implements lbnf.Absyn.Grammar.Visitor<lbnf.Absyn.Grammar, A>,
		lbnf.Absyn.Def.Visitor<lbnf.Absyn.Def, A>, lbnf.Absyn.Item.Visitor<lbnf.Absyn.Item, A>,
		lbnf.Absyn.Cat.Visitor<lbnf.Absyn.Cat, A>, lbnf.Absyn.Label.Visitor<lbnf.Absyn.Label, A>,
		lbnf.Absyn.LabelId.Visitor<lbnf.Absyn.LabelId, A>, lbnf.Absyn.ProfItem.Visitor<lbnf.Absyn.ProfItem, A>,
		lbnf.Absyn.IntList.Visitor<lbnf.Absyn.IntList, A>, lbnf.Absyn.RHS.Visitor<lbnf.Absyn.RHS, A>,
		lbnf.Absyn.MinimumSize.Visitor<lbnf.Absyn.MinimumSize, A>, lbnf.Absyn.Reg.Visitor<lbnf.Absyn.Reg, A> {
	/* Grammar */
	public lbnf.Absyn.Grammar visit(lbnf.Absyn.MkGrammar p, A arg) {
		lbnf.Absyn.ListDef listdef_ = new lbnf.Absyn.ListDef();
		for (lbnf.Absyn.Def x : p.listdef_) {
			listdef_.add(x.accept(this, arg));
		}
		return new lbnf.Absyn.MkGrammar(listdef_);
	}

	/* Def */
	public lbnf.Absyn.Def visit(lbnf.Absyn.Rule p, A arg) {
		lbnf.Absyn.Label label_ = p.label_.accept(this, arg);
		lbnf.Absyn.Cat cat_ = p.cat_.accept(this, arg);
		lbnf.Absyn.ListItem listitem_ = new lbnf.Absyn.ListItem();
		for (lbnf.Absyn.Item x : p.listitem_) {
			listitem_.add(x.accept(this, arg));
		}
		return new lbnf.Absyn.Rule(label_, cat_, listitem_);
	}

	public lbnf.Absyn.Def visit(lbnf.Absyn.Comment p, A arg) {
		String string_ = p.string_;
		return new lbnf.Absyn.Comment(string_);
	}

	public lbnf.Absyn.Def visit(lbnf.Absyn.Comments p, A arg) {
		String string_1 = p.string_1;
		String string_2 = p.string_2;
		return new lbnf.Absyn.Comments(string_1, string_2);
	}

	public lbnf.Absyn.Def visit(lbnf.Absyn.Internal p, A arg) {
		lbnf.Absyn.Label label_ = p.label_.accept(this, arg);
		lbnf.Absyn.Cat cat_ = p.cat_.accept(this, arg);
		lbnf.Absyn.ListItem listitem_ = new lbnf.Absyn.ListItem();
		for (lbnf.Absyn.Item x : p.listitem_) {
			listitem_.add(x.accept(this, arg));
		}
		return new lbnf.Absyn.Internal(label_, cat_, listitem_);
	}

	public lbnf.Absyn.Def visit(lbnf.Absyn.Token p, A arg) {
		String ident_ = p.ident_;
		lbnf.Absyn.Reg reg_ = p.reg_.accept(this, arg);
		return new lbnf.Absyn.Token(ident_, reg_);
	}

	public lbnf.Absyn.Def visit(lbnf.Absyn.PosToken p, A arg) {
		String ident_ = p.ident_;
		lbnf.Absyn.Reg reg_ = p.reg_.accept(this, arg);
		return new lbnf.Absyn.PosToken(ident_, reg_);
	}

	public lbnf.Absyn.Def visit(lbnf.Absyn.Entryp p, A arg) {
		lbnf.Absyn.ListIdent listident_ = p.listident_;
		return new lbnf.Absyn.Entryp(listident_);
	}

	public lbnf.Absyn.Def visit(lbnf.Absyn.Separator p, A arg) {
		lbnf.Absyn.MinimumSize minimumsize_ = p.minimumsize_.accept(this, arg);
		lbnf.Absyn.Cat cat_ = p.cat_.accept(this, arg);
		String string_ = p.string_;
		return new lbnf.Absyn.Separator(minimumsize_, cat_, string_);
	}

	public lbnf.Absyn.Def visit(lbnf.Absyn.Terminator p, A arg) {
		lbnf.Absyn.MinimumSize minimumsize_ = p.minimumsize_.accept(this, arg);
		lbnf.Absyn.Cat cat_ = p.cat_.accept(this, arg);
		String string_ = p.string_;
		return new lbnf.Absyn.Terminator(minimumsize_, cat_, string_);
	}

	public lbnf.Absyn.Def visit(lbnf.Absyn.Coercions p, A arg) {
		String ident_ = p.ident_;
		Integer integer_ = p.integer_;
		return new lbnf.Absyn.Coercions(ident_, integer_);
	}

	public lbnf.Absyn.Def visit(lbnf.Absyn.Rules p, A arg) {
		String ident_ = p.ident_;
		lbnf.Absyn.ListRHS listrhs_ = new lbnf.Absyn.ListRHS();
		for (lbnf.Absyn.RHS x : p.listrhs_) {
			listrhs_.add(x.accept(this, arg));
		}
		return new lbnf.Absyn.Rules(ident_, listrhs_);
	}

	public lbnf.Absyn.Def visit(lbnf.Absyn.Layout p, A arg) {
		lbnf.Absyn.ListString liststring_ = p.liststring_;
		return new lbnf.Absyn.Layout(liststring_);
	}

	public lbnf.Absyn.Def visit(lbnf.Absyn.LayoutStop p, A arg) {
		lbnf.Absyn.ListString liststring_ = p.liststring_;
		return new lbnf.Absyn.LayoutStop(liststring_);
	}

	public lbnf.Absyn.Def visit(lbnf.Absyn.LayoutTop p, A arg) {
		return new lbnf.Absyn.LayoutTop();
	}

	/* Item */
	public lbnf.Absyn.Item visit(lbnf.Absyn.Terminal p, A arg) {
		String string_ = p.string_;
		return new lbnf.Absyn.Terminal(string_);
	}

	public lbnf.Absyn.Item visit(lbnf.Absyn.NTerminal p, A arg) {
		lbnf.Absyn.Cat cat_ = p.cat_.accept(this, arg);
		return new lbnf.Absyn.NTerminal(cat_);
	}

	/* Cat */
	public lbnf.Absyn.Cat visit(lbnf.Absyn.ListCat p, A arg) {
		lbnf.Absyn.Cat cat_ = p.cat_.accept(this, arg);
		return new lbnf.Absyn.ListCat(cat_);
	}

	public lbnf.Absyn.Cat visit(lbnf.Absyn.IdCat p, A arg) {
		String ident_ = p.ident_;
		return new lbnf.Absyn.IdCat(ident_);
	}

	/* Label */
	public lbnf.Absyn.Label visit(lbnf.Absyn.LabNoP p, A arg) {
		lbnf.Absyn.LabelId labelid_ = p.labelid_.accept(this, arg);
		return new lbnf.Absyn.LabNoP(labelid_);
	}

	public lbnf.Absyn.Label visit(lbnf.Absyn.LabP p, A arg) {
		lbnf.Absyn.LabelId labelid_ = p.labelid_.accept(this, arg);
		lbnf.Absyn.ListProfItem listprofitem_ = new lbnf.Absyn.ListProfItem();
		for (lbnf.Absyn.ProfItem x : p.listprofitem_) {
			listprofitem_.add(x.accept(this, arg));
		}
		return new lbnf.Absyn.LabP(labelid_, listprofitem_);
	}

	public lbnf.Absyn.Label visit(lbnf.Absyn.LabPF p, A arg) {
		lbnf.Absyn.LabelId labelid_1 = p.labelid_1.accept(this, arg);
		lbnf.Absyn.LabelId labelid_2 = p.labelid_2.accept(this, arg);
		lbnf.Absyn.ListProfItem listprofitem_ = new lbnf.Absyn.ListProfItem();
		for (lbnf.Absyn.ProfItem x : p.listprofitem_) {
			listprofitem_.add(x.accept(this, arg));
		}
		return new lbnf.Absyn.LabPF(labelid_1, labelid_2, listprofitem_);
	}

	public lbnf.Absyn.Label visit(lbnf.Absyn.LabF p, A arg) {
		lbnf.Absyn.LabelId labelid_1 = p.labelid_1.accept(this, arg);
		lbnf.Absyn.LabelId labelid_2 = p.labelid_2.accept(this, arg);
		return new lbnf.Absyn.LabF(labelid_1, labelid_2);
	}

	/* LabelId */
	public lbnf.Absyn.LabelId visit(lbnf.Absyn.Id p, A arg) {
		String ident_ = p.ident_;
		return new lbnf.Absyn.Id(ident_);
	}

	public lbnf.Absyn.LabelId visit(lbnf.Absyn.Wild p, A arg) {
		return new lbnf.Absyn.Wild();
	}

	public lbnf.Absyn.LabelId visit(lbnf.Absyn.ListE p, A arg) {
		return new lbnf.Absyn.ListE();
	}

	public lbnf.Absyn.LabelId visit(lbnf.Absyn.ListCons p, A arg) {
		return new lbnf.Absyn.ListCons();
	}

	public lbnf.Absyn.LabelId visit(lbnf.Absyn.ListOne p, A arg) {
		return new lbnf.Absyn.ListOne();
	}

	/* ProfItem */
	public lbnf.Absyn.ProfItem visit(lbnf.Absyn.ProfIt p, A arg) {
		lbnf.Absyn.ListIntList listintlist_ = new lbnf.Absyn.ListIntList();
		for (lbnf.Absyn.IntList x : p.listintlist_) {
			listintlist_.add(x.accept(this, arg));
		}
		lbnf.Absyn.ListInteger listinteger_ = p.listinteger_;
		return new lbnf.Absyn.ProfIt(listintlist_, listinteger_);
	}

	/* IntList */
	public lbnf.Absyn.IntList visit(lbnf.Absyn.Ints p, A arg) {
		lbnf.Absyn.ListInteger listinteger_ = p.listinteger_;
		return new lbnf.Absyn.Ints(listinteger_);
	}

	/* RHS */
	public lbnf.Absyn.RHS visit(lbnf.Absyn.MkRHS p, A arg) {
		lbnf.Absyn.ListItem listitem_ = new lbnf.Absyn.ListItem();
		for (lbnf.Absyn.Item x : p.listitem_) {
			listitem_.add(x.accept(this, arg));
		}
		return new lbnf.Absyn.MkRHS(listitem_);
	}

	/* MinimumSize */
	public lbnf.Absyn.MinimumSize visit(lbnf.Absyn.MNonempty p, A arg) {
		return new lbnf.Absyn.MNonempty();
	}

	public lbnf.Absyn.MinimumSize visit(lbnf.Absyn.MEmpty p, A arg) {
		return new lbnf.Absyn.MEmpty();
	}

	/* Reg */
	public lbnf.Absyn.Reg visit(lbnf.Absyn.RSeq p, A arg) {
		lbnf.Absyn.Reg reg_1 = p.reg_1.accept(this, arg);
		lbnf.Absyn.Reg reg_2 = p.reg_2.accept(this, arg);
		return new lbnf.Absyn.RSeq(reg_1, reg_2);
	}

	public lbnf.Absyn.Reg visit(lbnf.Absyn.RAlt p, A arg) {
		lbnf.Absyn.Reg reg_1 = p.reg_1.accept(this, arg);
		lbnf.Absyn.Reg reg_2 = p.reg_2.accept(this, arg);
		return new lbnf.Absyn.RAlt(reg_1, reg_2);
	}

	public lbnf.Absyn.Reg visit(lbnf.Absyn.RMinus p, A arg) {
		lbnf.Absyn.Reg reg_1 = p.reg_1.accept(this, arg);
		lbnf.Absyn.Reg reg_2 = p.reg_2.accept(this, arg);
		return new lbnf.Absyn.RMinus(reg_1, reg_2);
	}

	public lbnf.Absyn.Reg visit(lbnf.Absyn.RStar p, A arg) {
		lbnf.Absyn.Reg reg_ = p.reg_.accept(this, arg);
		return new lbnf.Absyn.RStar(reg_);
	}

	public lbnf.Absyn.Reg visit(lbnf.Absyn.RPlus p, A arg) {
		lbnf.Absyn.Reg reg_ = p.reg_.accept(this, arg);
		return new lbnf.Absyn.RPlus(reg_);
	}

	public lbnf.Absyn.Reg visit(lbnf.Absyn.ROpt p, A arg) {
		lbnf.Absyn.Reg reg_ = p.reg_.accept(this, arg);
		return new lbnf.Absyn.ROpt(reg_);
	}

	public lbnf.Absyn.Reg visit(lbnf.Absyn.REps p, A arg) {
		return new lbnf.Absyn.REps();
	}

	public lbnf.Absyn.Reg visit(lbnf.Absyn.RChar p, A arg) {
		Character char_ = p.char_;
		return new lbnf.Absyn.RChar(char_);
	}

	public lbnf.Absyn.Reg visit(lbnf.Absyn.RAlts p, A arg) {
		String string_ = p.string_;
		return new lbnf.Absyn.RAlts(string_);
	}

	public lbnf.Absyn.Reg visit(lbnf.Absyn.RSeqs p, A arg) {
		String string_ = p.string_;
		return new lbnf.Absyn.RSeqs(string_);
	}

	public lbnf.Absyn.Reg visit(lbnf.Absyn.RDigit p, A arg) {
		return new lbnf.Absyn.RDigit();
	}

	public lbnf.Absyn.Reg visit(lbnf.Absyn.RLetter p, A arg) {
		return new lbnf.Absyn.RLetter();
	}

	public lbnf.Absyn.Reg visit(lbnf.Absyn.RUpper p, A arg) {
		return new lbnf.Absyn.RUpper();
	}

	public lbnf.Absyn.Reg visit(lbnf.Absyn.RLower p, A arg) {
		return new lbnf.Absyn.RLower();
	}

	public lbnf.Absyn.Reg visit(lbnf.Absyn.RAny p, A arg) {
		return new lbnf.Absyn.RAny();
	}
}
