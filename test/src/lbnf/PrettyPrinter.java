// File generated by the BNF Converter (bnfc 2.9.5).

package lbnf;

public class PrettyPrinter {
	// For certain applications increasing the initial size of the buffer may
	// improve performance.
	private static final int INITIAL_BUFFER_SIZE = 128;
	private static final int INDENT_WIDTH = 2;
	// You may wish to change the parentheses used in precedence.
	private static final String _L_PAREN = new String("(");
	private static final String _R_PAREN = new String(")");

	// You may wish to change render
	private static void render(String s) {
		if (s.equals("{")) {
			onEmptyLine();
			buf_.append(s);
			_n_ = _n_ + INDENT_WIDTH;
			buf_.append("\n");
			indent();
		} else if (s.equals("(") || s.equals("["))
			buf_.append(s);
		else if (s.equals(")") || s.equals("]")) {
			removeTrailingWhitespace();
			buf_.append(s);
			buf_.append(" ");
		} else if (s.equals("}")) {
			_n_ = _n_ - INDENT_WIDTH;
			onEmptyLine();
			buf_.append(s);
			buf_.append("\n");
			indent();
		} else if (s.equals(",")) {
			removeTrailingWhitespace();
			buf_.append(s);
			buf_.append(" ");
		} else if (s.equals(";")) {
			removeTrailingWhitespace();
			buf_.append(s);
			buf_.append("\n");
			indent();
		} else if (s.equals(""))
			return;
		else if (s.trim().equals("")) {
			backup();
			buf_.append(s);
		} else {
			buf_.append(s);
			buf_.append(" ");
		}
	}

	// print and show methods are defined for each category.
	public static String print(lbnf.Absyn.Grammar foo) {
		pp(foo, 0);
		trim();
		String temp = buf_.toString();
		buf_.delete(0, buf_.length());
		return temp;
	}

	public static String show(lbnf.Absyn.Grammar foo) {
		sh(foo);
		String temp = buf_.toString();
		buf_.delete(0, buf_.length());
		return temp;
	}

	public static String print(lbnf.Absyn.ListDef foo) {
		pp(foo, 0);
		trim();
		String temp = buf_.toString();
		buf_.delete(0, buf_.length());
		return temp;
	}

	public static String show(lbnf.Absyn.ListDef foo) {
		sh(foo);
		String temp = buf_.toString();
		buf_.delete(0, buf_.length());
		return temp;
	}

	public static String print(lbnf.Absyn.ListItem foo) {
		pp(foo, 0);
		trim();
		String temp = buf_.toString();
		buf_.delete(0, buf_.length());
		return temp;
	}

	public static String show(lbnf.Absyn.ListItem foo) {
		sh(foo);
		String temp = buf_.toString();
		buf_.delete(0, buf_.length());
		return temp;
	}

	public static String print(lbnf.Absyn.Def foo) {
		pp(foo, 0);
		trim();
		String temp = buf_.toString();
		buf_.delete(0, buf_.length());
		return temp;
	}

	public static String show(lbnf.Absyn.Def foo) {
		sh(foo);
		String temp = buf_.toString();
		buf_.delete(0, buf_.length());
		return temp;
	}

	public static String print(lbnf.Absyn.Item foo) {
		pp(foo, 0);
		trim();
		String temp = buf_.toString();
		buf_.delete(0, buf_.length());
		return temp;
	}

	public static String show(lbnf.Absyn.Item foo) {
		sh(foo);
		String temp = buf_.toString();
		buf_.delete(0, buf_.length());
		return temp;
	}

	public static String print(lbnf.Absyn.Cat foo) {
		pp(foo, 0);
		trim();
		String temp = buf_.toString();
		buf_.delete(0, buf_.length());
		return temp;
	}

	public static String show(lbnf.Absyn.Cat foo) {
		sh(foo);
		String temp = buf_.toString();
		buf_.delete(0, buf_.length());
		return temp;
	}

	public static String print(lbnf.Absyn.Label foo) {
		pp(foo, 0);
		trim();
		String temp = buf_.toString();
		buf_.delete(0, buf_.length());
		return temp;
	}

	public static String show(lbnf.Absyn.Label foo) {
		sh(foo);
		String temp = buf_.toString();
		buf_.delete(0, buf_.length());
		return temp;
	}

	public static String print(lbnf.Absyn.LabelId foo) {
		pp(foo, 0);
		trim();
		String temp = buf_.toString();
		buf_.delete(0, buf_.length());
		return temp;
	}

	public static String show(lbnf.Absyn.LabelId foo) {
		sh(foo);
		String temp = buf_.toString();
		buf_.delete(0, buf_.length());
		return temp;
	}

	public static String print(lbnf.Absyn.ProfItem foo) {
		pp(foo, 0);
		trim();
		String temp = buf_.toString();
		buf_.delete(0, buf_.length());
		return temp;
	}

	public static String show(lbnf.Absyn.ProfItem foo) {
		sh(foo);
		String temp = buf_.toString();
		buf_.delete(0, buf_.length());
		return temp;
	}

	public static String print(lbnf.Absyn.IntList foo) {
		pp(foo, 0);
		trim();
		String temp = buf_.toString();
		buf_.delete(0, buf_.length());
		return temp;
	}

	public static String show(lbnf.Absyn.IntList foo) {
		sh(foo);
		String temp = buf_.toString();
		buf_.delete(0, buf_.length());
		return temp;
	}

	public static String print(lbnf.Absyn.ListInteger foo) {
		pp(foo, 0);
		trim();
		String temp = buf_.toString();
		buf_.delete(0, buf_.length());
		return temp;
	}

	public static String show(lbnf.Absyn.ListInteger foo) {
		sh(foo);
		String temp = buf_.toString();
		buf_.delete(0, buf_.length());
		return temp;
	}

	public static String print(lbnf.Absyn.ListIntList foo) {
		pp(foo, 0);
		trim();
		String temp = buf_.toString();
		buf_.delete(0, buf_.length());
		return temp;
	}

	public static String show(lbnf.Absyn.ListIntList foo) {
		sh(foo);
		String temp = buf_.toString();
		buf_.delete(0, buf_.length());
		return temp;
	}

	public static String print(lbnf.Absyn.ListProfItem foo) {
		pp(foo, 0);
		trim();
		String temp = buf_.toString();
		buf_.delete(0, buf_.length());
		return temp;
	}

	public static String show(lbnf.Absyn.ListProfItem foo) {
		sh(foo);
		String temp = buf_.toString();
		buf_.delete(0, buf_.length());
		return temp;
	}

	public static String print(lbnf.Absyn.ListString foo) {
		pp(foo, 0);
		trim();
		String temp = buf_.toString();
		buf_.delete(0, buf_.length());
		return temp;
	}

	public static String show(lbnf.Absyn.ListString foo) {
		sh(foo);
		String temp = buf_.toString();
		buf_.delete(0, buf_.length());
		return temp;
	}

	public static String print(lbnf.Absyn.ListRHS foo) {
		pp(foo, 0);
		trim();
		String temp = buf_.toString();
		buf_.delete(0, buf_.length());
		return temp;
	}

	public static String show(lbnf.Absyn.ListRHS foo) {
		sh(foo);
		String temp = buf_.toString();
		buf_.delete(0, buf_.length());
		return temp;
	}

	public static String print(lbnf.Absyn.RHS foo) {
		pp(foo, 0);
		trim();
		String temp = buf_.toString();
		buf_.delete(0, buf_.length());
		return temp;
	}

	public static String show(lbnf.Absyn.RHS foo) {
		sh(foo);
		String temp = buf_.toString();
		buf_.delete(0, buf_.length());
		return temp;
	}

	public static String print(lbnf.Absyn.MinimumSize foo) {
		pp(foo, 0);
		trim();
		String temp = buf_.toString();
		buf_.delete(0, buf_.length());
		return temp;
	}

	public static String show(lbnf.Absyn.MinimumSize foo) {
		sh(foo);
		String temp = buf_.toString();
		buf_.delete(0, buf_.length());
		return temp;
	}

	public static String print(lbnf.Absyn.Reg foo) {
		pp(foo, 0);
		trim();
		String temp = buf_.toString();
		buf_.delete(0, buf_.length());
		return temp;
	}

	public static String show(lbnf.Absyn.Reg foo) {
		sh(foo);
		String temp = buf_.toString();
		buf_.delete(0, buf_.length());
		return temp;
	}

	public static String print(lbnf.Absyn.ListIdent foo) {
		pp(foo, 0);
		trim();
		String temp = buf_.toString();
		buf_.delete(0, buf_.length());
		return temp;
	}

	public static String show(lbnf.Absyn.ListIdent foo) {
		sh(foo);
		String temp = buf_.toString();
		buf_.delete(0, buf_.length());
		return temp;
	}

	/*** You shouldn't need to change anything beyond this point. ***/

	private static void pp(lbnf.Absyn.Grammar foo, int _i_) {
		if (foo instanceof lbnf.Absyn.MkGrammar) {
			lbnf.Absyn.MkGrammar _mkgrammar = (lbnf.Absyn.MkGrammar) foo;
			if (_i_ > 0)
				render(_L_PAREN);
			pp(_mkgrammar.listdef_, 0);
			if (_i_ > 0)
				render(_R_PAREN);
		}

	}

	private static void pp(lbnf.Absyn.ListDef foo, int _i_) {
		ppListDef(foo.iterator(), _i_);
	}

	private static void ppListDef(java.util.Iterator<lbnf.Absyn.Def> it, int _i_) {
		if (it.hasNext()) { /* cons */
			lbnf.Absyn.Def el = it.next();
			pp(el, _i_);
			render(";");
			ppListDef(it, _i_);
		}
	}

	private static void pp(lbnf.Absyn.ListItem foo, int _i_) {
		ppListItem(foo.iterator(), _i_);
	}

	private static void ppListItem(java.util.Iterator<lbnf.Absyn.Item> it, int _i_) {
		if (it.hasNext()) { /* cons */
			lbnf.Absyn.Item el = it.next();
			pp(el, _i_);
			ppListItem(it, _i_);
		}
	}

	private static void pp(lbnf.Absyn.Def foo, int _i_) {
		if (foo instanceof lbnf.Absyn.Rule) {
			lbnf.Absyn.Rule _rule = (lbnf.Absyn.Rule) foo;
			if (_i_ > 0)
				render(_L_PAREN);
			pp(_rule.label_, 0);
			render(".");
			pp(_rule.cat_, 0);
			render("::=");
			pp(_rule.listitem_, 0);
			if (_i_ > 0)
				render(_R_PAREN);
		} else if (foo instanceof lbnf.Absyn.Comment) {
			lbnf.Absyn.Comment _comment = (lbnf.Absyn.Comment) foo;
			if (_i_ > 0)
				render(_L_PAREN);
			render("comment");
			printQuoted(_comment.string_);
			if (_i_ > 0)
				render(_R_PAREN);
		} else if (foo instanceof lbnf.Absyn.Comments) {
			lbnf.Absyn.Comments _comments = (lbnf.Absyn.Comments) foo;
			if (_i_ > 0)
				render(_L_PAREN);
			render("comment");
			printQuoted(_comments.string_1);
			printQuoted(_comments.string_2);
			if (_i_ > 0)
				render(_R_PAREN);
		} else if (foo instanceof lbnf.Absyn.Internal) {
			lbnf.Absyn.Internal _internal = (lbnf.Absyn.Internal) foo;
			if (_i_ > 0)
				render(_L_PAREN);
			render("internal");
			pp(_internal.label_, 0);
			render(".");
			pp(_internal.cat_, 0);
			render("::=");
			pp(_internal.listitem_, 0);
			if (_i_ > 0)
				render(_R_PAREN);
		} else if (foo instanceof lbnf.Absyn.Token) {
			lbnf.Absyn.Token _token = (lbnf.Absyn.Token) foo;
			if (_i_ > 0)
				render(_L_PAREN);
			render("token");
			pp(_token.ident_, 0);
			pp(_token.reg_, 0);
			if (_i_ > 0)
				render(_R_PAREN);
		} else if (foo instanceof lbnf.Absyn.PosToken) {
			lbnf.Absyn.PosToken _postoken = (lbnf.Absyn.PosToken) foo;
			if (_i_ > 0)
				render(_L_PAREN);
			render("position");
			render("token");
			pp(_postoken.ident_, 0);
			pp(_postoken.reg_, 0);
			if (_i_ > 0)
				render(_R_PAREN);
		} else if (foo instanceof lbnf.Absyn.Entryp) {
			lbnf.Absyn.Entryp _entryp = (lbnf.Absyn.Entryp) foo;
			if (_i_ > 0)
				render(_L_PAREN);
			render("entrypoints");
			pp(_entryp.listident_, 0);
			if (_i_ > 0)
				render(_R_PAREN);
		} else if (foo instanceof lbnf.Absyn.Separator) {
			lbnf.Absyn.Separator _separator = (lbnf.Absyn.Separator) foo;
			if (_i_ > 0)
				render(_L_PAREN);
			render("separator");
			pp(_separator.minimumsize_, 0);
			pp(_separator.cat_, 0);
			printQuoted(_separator.string_);
			if (_i_ > 0)
				render(_R_PAREN);
		} else if (foo instanceof lbnf.Absyn.Terminator) {
			lbnf.Absyn.Terminator _terminator = (lbnf.Absyn.Terminator) foo;
			if (_i_ > 0)
				render(_L_PAREN);
			render("terminator");
			pp(_terminator.minimumsize_, 0);
			pp(_terminator.cat_, 0);
			printQuoted(_terminator.string_);
			if (_i_ > 0)
				render(_R_PAREN);
		} else if (foo instanceof lbnf.Absyn.Coercions) {
			lbnf.Absyn.Coercions _coercions = (lbnf.Absyn.Coercions) foo;
			if (_i_ > 0)
				render(_L_PAREN);
			render("coercions");
			pp(_coercions.ident_, 0);
			pp(_coercions.integer_, 0);
			if (_i_ > 0)
				render(_R_PAREN);
		} else if (foo instanceof lbnf.Absyn.Rules) {
			lbnf.Absyn.Rules _rules = (lbnf.Absyn.Rules) foo;
			if (_i_ > 0)
				render(_L_PAREN);
			render("rules");
			pp(_rules.ident_, 0);
			render("::=");
			pp(_rules.listrhs_, 0);
			if (_i_ > 0)
				render(_R_PAREN);
		} else if (foo instanceof lbnf.Absyn.Layout) {
			lbnf.Absyn.Layout _layout = (lbnf.Absyn.Layout) foo;
			if (_i_ > 0)
				render(_L_PAREN);
			render("layout");
			pp(_layout.liststring_, 0);
			if (_i_ > 0)
				render(_R_PAREN);
		} else if (foo instanceof lbnf.Absyn.LayoutStop) {
			lbnf.Absyn.LayoutStop _layoutstop = (lbnf.Absyn.LayoutStop) foo;
			if (_i_ > 0)
				render(_L_PAREN);
			render("layout");
			render("stop");
			pp(_layoutstop.liststring_, 0);
			if (_i_ > 0)
				render(_R_PAREN);
		} else if (foo instanceof lbnf.Absyn.LayoutTop) {
			lbnf.Absyn.LayoutTop _layouttop = (lbnf.Absyn.LayoutTop) foo;
			if (_i_ > 0)
				render(_L_PAREN);
			render("layout");
			render("toplevel");
			if (_i_ > 0)
				render(_R_PAREN);
		}

	}

	private static void pp(lbnf.Absyn.Item foo, int _i_) {
		if (foo instanceof lbnf.Absyn.Terminal) {
			lbnf.Absyn.Terminal _terminal = (lbnf.Absyn.Terminal) foo;
			if (_i_ > 0)
				render(_L_PAREN);
			printQuoted(_terminal.string_);
			if (_i_ > 0)
				render(_R_PAREN);
		} else if (foo instanceof lbnf.Absyn.NTerminal) {
			lbnf.Absyn.NTerminal _nterminal = (lbnf.Absyn.NTerminal) foo;
			if (_i_ > 0)
				render(_L_PAREN);
			pp(_nterminal.cat_, 0);
			if (_i_ > 0)
				render(_R_PAREN);
		}

	}

	private static void pp(lbnf.Absyn.Cat foo, int _i_) {
		if (foo instanceof lbnf.Absyn.ListCat) {
			lbnf.Absyn.ListCat _listcat = (lbnf.Absyn.ListCat) foo;
			if (_i_ > 0)
				render(_L_PAREN);
			render("[");
			pp(_listcat.cat_, 0);
			render("]");
			if (_i_ > 0)
				render(_R_PAREN);
		} else if (foo instanceof lbnf.Absyn.IdCat) {
			lbnf.Absyn.IdCat _idcat = (lbnf.Absyn.IdCat) foo;
			if (_i_ > 0)
				render(_L_PAREN);
			pp(_idcat.ident_, 0);
			if (_i_ > 0)
				render(_R_PAREN);
		}

	}

	private static void pp(lbnf.Absyn.Label foo, int _i_) {
		if (foo instanceof lbnf.Absyn.LabNoP) {
			lbnf.Absyn.LabNoP _labnop = (lbnf.Absyn.LabNoP) foo;
			if (_i_ > 0)
				render(_L_PAREN);
			pp(_labnop.labelid_, 0);
			if (_i_ > 0)
				render(_R_PAREN);
		} else if (foo instanceof lbnf.Absyn.LabP) {
			lbnf.Absyn.LabP _labp = (lbnf.Absyn.LabP) foo;
			if (_i_ > 0)
				render(_L_PAREN);
			pp(_labp.labelid_, 0);
			pp(_labp.listprofitem_, 0);
			if (_i_ > 0)
				render(_R_PAREN);
		} else if (foo instanceof lbnf.Absyn.LabPF) {
			lbnf.Absyn.LabPF _labpf = (lbnf.Absyn.LabPF) foo;
			if (_i_ > 0)
				render(_L_PAREN);
			pp(_labpf.labelid_1, 0);
			pp(_labpf.labelid_2, 0);
			pp(_labpf.listprofitem_, 0);
			if (_i_ > 0)
				render(_R_PAREN);
		} else if (foo instanceof lbnf.Absyn.LabF) {
			lbnf.Absyn.LabF _labf = (lbnf.Absyn.LabF) foo;
			if (_i_ > 0)
				render(_L_PAREN);
			pp(_labf.labelid_1, 0);
			pp(_labf.labelid_2, 0);
			if (_i_ > 0)
				render(_R_PAREN);
		}

	}

	private static void pp(lbnf.Absyn.LabelId foo, int _i_) {
		if (foo instanceof lbnf.Absyn.Id) {
			lbnf.Absyn.Id _id = (lbnf.Absyn.Id) foo;
			if (_i_ > 0)
				render(_L_PAREN);
			pp(_id.ident_, 0);
			if (_i_ > 0)
				render(_R_PAREN);
		} else if (foo instanceof lbnf.Absyn.Wild) {
			lbnf.Absyn.Wild _wild = (lbnf.Absyn.Wild) foo;
			if (_i_ > 0)
				render(_L_PAREN);
			render("_");
			if (_i_ > 0)
				render(_R_PAREN);
		} else if (foo instanceof lbnf.Absyn.ListE) {
			lbnf.Absyn.ListE _liste = (lbnf.Absyn.ListE) foo;
			if (_i_ > 0)
				render(_L_PAREN);
			render("[");
			render("]");
			if (_i_ > 0)
				render(_R_PAREN);
		} else if (foo instanceof lbnf.Absyn.ListCons) {
			lbnf.Absyn.ListCons _listcons = (lbnf.Absyn.ListCons) foo;
			if (_i_ > 0)
				render(_L_PAREN);
			render("(");
			render(":");
			render(")");
			if (_i_ > 0)
				render(_R_PAREN);
		} else if (foo instanceof lbnf.Absyn.ListOne) {
			lbnf.Absyn.ListOne _listone = (lbnf.Absyn.ListOne) foo;
			if (_i_ > 0)
				render(_L_PAREN);
			render("(");
			render(":");
			render("[");
			render("]");
			render(")");
			if (_i_ > 0)
				render(_R_PAREN);
		}

	}

	private static void pp(lbnf.Absyn.ProfItem foo, int _i_) {
		if (foo instanceof lbnf.Absyn.ProfIt) {
			lbnf.Absyn.ProfIt _profit = (lbnf.Absyn.ProfIt) foo;
			if (_i_ > 0)
				render(_L_PAREN);
			render("(");
			render("[");
			pp(_profit.listintlist_, 0);
			render("]");
			render(",");
			render("[");
			pp(_profit.listinteger_, 0);
			render("]");
			render(")");
			if (_i_ > 0)
				render(_R_PAREN);
		}

	}

	private static void pp(lbnf.Absyn.IntList foo, int _i_) {
		if (foo instanceof lbnf.Absyn.Ints) {
			lbnf.Absyn.Ints _ints = (lbnf.Absyn.Ints) foo;
			if (_i_ > 0)
				render(_L_PAREN);
			render("[");
			pp(_ints.listinteger_, 0);
			render("]");
			if (_i_ > 0)
				render(_R_PAREN);
		}

	}

	private static void pp(lbnf.Absyn.ListInteger foo, int _i_) {
		ppListInteger(foo.iterator(), _i_);
	}

	private static void ppListInteger(java.util.Iterator<Integer> it, int _i_) {
		if (it.hasNext()) {
			Integer el = it.next();
			if (!it.hasNext()) { /* last */
				pp(el, _i_);
			} else { /* cons */
				pp(el, _i_);
				render(",");
				ppListInteger(it, _i_);
			}
		}
	}

	private static void pp(lbnf.Absyn.ListIntList foo, int _i_) {
		ppListIntList(foo.iterator(), _i_);
	}

	private static void ppListIntList(java.util.Iterator<lbnf.Absyn.IntList> it, int _i_) {
		if (it.hasNext()) {
			lbnf.Absyn.IntList el = it.next();
			if (!it.hasNext()) { /* last */
				pp(el, _i_);
			} else { /* cons */
				pp(el, _i_);
				render(",");
				ppListIntList(it, _i_);
			}
		}
	}

	private static void pp(lbnf.Absyn.ListProfItem foo, int _i_) {
		ppListProfItem(foo.iterator(), _i_);
	}

	private static void ppListProfItem(java.util.Iterator<lbnf.Absyn.ProfItem> it, int _i_) {
		if (it.hasNext()) {
			lbnf.Absyn.ProfItem el = it.next();
			if (!it.hasNext()) { /* last */
				pp(el, _i_);
			} else { /* cons */
				pp(el, _i_);
				ppListProfItem(it, _i_);
			}
		}
	}

	private static void pp(lbnf.Absyn.ListString foo, int _i_) {
		ppListString(foo.iterator(), _i_);
	}

	private static void ppListString(java.util.Iterator<String> it, int _i_) {
		if (it.hasNext()) {
			String el = it.next();
			if (!it.hasNext()) { /* last */
				printQuoted(el);
			} else { /* cons */
				printQuoted(el);
				render(",");
				ppListString(it, _i_);
			}
		}
	}

	private static void pp(lbnf.Absyn.ListRHS foo, int _i_) {
		ppListRHS(foo.iterator(), _i_);
	}

	private static void ppListRHS(java.util.Iterator<lbnf.Absyn.RHS> it, int _i_) {
		if (it.hasNext()) {
			lbnf.Absyn.RHS el = it.next();
			if (!it.hasNext()) { /* last */
				pp(el, _i_);
			} else { /* cons */
				pp(el, _i_);
				render("|");
				ppListRHS(it, _i_);
			}
		}
	}

	private static void pp(lbnf.Absyn.RHS foo, int _i_) {
		if (foo instanceof lbnf.Absyn.MkRHS) {
			lbnf.Absyn.MkRHS _mkrhs = (lbnf.Absyn.MkRHS) foo;
			if (_i_ > 0)
				render(_L_PAREN);
			pp(_mkrhs.listitem_, 0);
			if (_i_ > 0)
				render(_R_PAREN);
		}

	}

	private static void pp(lbnf.Absyn.MinimumSize foo, int _i_) {
		if (foo instanceof lbnf.Absyn.MNonempty) {
			lbnf.Absyn.MNonempty _mnonempty = (lbnf.Absyn.MNonempty) foo;
			if (_i_ > 0)
				render(_L_PAREN);
			render("nonempty");
			if (_i_ > 0)
				render(_R_PAREN);
		} else if (foo instanceof lbnf.Absyn.MEmpty) {
			lbnf.Absyn.MEmpty _mempty = (lbnf.Absyn.MEmpty) foo;
			if (_i_ > 0)
				render(_L_PAREN);
			if (_i_ > 0)
				render(_R_PAREN);
		}

	}

	private static void pp(lbnf.Absyn.Reg foo, int _i_) {
		if (foo instanceof lbnf.Absyn.RSeq) {
			lbnf.Absyn.RSeq _rseq = (lbnf.Absyn.RSeq) foo;
			if (_i_ > 2)
				render(_L_PAREN);
			pp(_rseq.reg_1, 2);
			pp(_rseq.reg_2, 3);
			if (_i_ > 2)
				render(_R_PAREN);
		} else if (foo instanceof lbnf.Absyn.RAlt) {
			lbnf.Absyn.RAlt _ralt = (lbnf.Absyn.RAlt) foo;
			if (_i_ > 1)
				render(_L_PAREN);
			pp(_ralt.reg_1, 1);
			render("|");
			pp(_ralt.reg_2, 2);
			if (_i_ > 1)
				render(_R_PAREN);
		} else if (foo instanceof lbnf.Absyn.RMinus) {
			lbnf.Absyn.RMinus _rminus = (lbnf.Absyn.RMinus) foo;
			if (_i_ > 1)
				render(_L_PAREN);
			pp(_rminus.reg_1, 2);
			render("-");
			pp(_rminus.reg_2, 2);
			if (_i_ > 1)
				render(_R_PAREN);
		} else if (foo instanceof lbnf.Absyn.RStar) {
			lbnf.Absyn.RStar _rstar = (lbnf.Absyn.RStar) foo;
			if (_i_ > 3)
				render(_L_PAREN);
			pp(_rstar.reg_, 3);
			render("*");
			if (_i_ > 3)
				render(_R_PAREN);
		} else if (foo instanceof lbnf.Absyn.RPlus) {
			lbnf.Absyn.RPlus _rplus = (lbnf.Absyn.RPlus) foo;
			if (_i_ > 3)
				render(_L_PAREN);
			pp(_rplus.reg_, 3);
			render("+");
			if (_i_ > 3)
				render(_R_PAREN);
		} else if (foo instanceof lbnf.Absyn.ROpt) {
			lbnf.Absyn.ROpt _ropt = (lbnf.Absyn.ROpt) foo;
			if (_i_ > 3)
				render(_L_PAREN);
			pp(_ropt.reg_, 3);
			render("?");
			if (_i_ > 3)
				render(_R_PAREN);
		} else if (foo instanceof lbnf.Absyn.REps) {
			lbnf.Absyn.REps _reps = (lbnf.Absyn.REps) foo;
			if (_i_ > 3)
				render(_L_PAREN);
			render("eps");
			if (_i_ > 3)
				render(_R_PAREN);
		} else if (foo instanceof lbnf.Absyn.RChar) {
			lbnf.Absyn.RChar _rchar = (lbnf.Absyn.RChar) foo;
			if (_i_ > 3)
				render(_L_PAREN);
			pp(_rchar.char_, 0);
			if (_i_ > 3)
				render(_R_PAREN);
		} else if (foo instanceof lbnf.Absyn.RAlts) {
			lbnf.Absyn.RAlts _ralts = (lbnf.Absyn.RAlts) foo;
			if (_i_ > 3)
				render(_L_PAREN);
			render("[");
			printQuoted(_ralts.string_);
			render("]");
			if (_i_ > 3)
				render(_R_PAREN);
		} else if (foo instanceof lbnf.Absyn.RSeqs) {
			lbnf.Absyn.RSeqs _rseqs = (lbnf.Absyn.RSeqs) foo;
			if (_i_ > 3)
				render(_L_PAREN);
			render("{");
			printQuoted(_rseqs.string_);
			render("}");
			if (_i_ > 3)
				render(_R_PAREN);
		} else if (foo instanceof lbnf.Absyn.RDigit) {
			lbnf.Absyn.RDigit _rdigit = (lbnf.Absyn.RDigit) foo;
			if (_i_ > 3)
				render(_L_PAREN);
			render("digit");
			if (_i_ > 3)
				render(_R_PAREN);
		} else if (foo instanceof lbnf.Absyn.RLetter) {
			lbnf.Absyn.RLetter _rletter = (lbnf.Absyn.RLetter) foo;
			if (_i_ > 3)
				render(_L_PAREN);
			render("letter");
			if (_i_ > 3)
				render(_R_PAREN);
		} else if (foo instanceof lbnf.Absyn.RUpper) {
			lbnf.Absyn.RUpper _rupper = (lbnf.Absyn.RUpper) foo;
			if (_i_ > 3)
				render(_L_PAREN);
			render("upper");
			if (_i_ > 3)
				render(_R_PAREN);
		} else if (foo instanceof lbnf.Absyn.RLower) {
			lbnf.Absyn.RLower _rlower = (lbnf.Absyn.RLower) foo;
			if (_i_ > 3)
				render(_L_PAREN);
			render("lower");
			if (_i_ > 3)
				render(_R_PAREN);
		} else if (foo instanceof lbnf.Absyn.RAny) {
			lbnf.Absyn.RAny _rany = (lbnf.Absyn.RAny) foo;
			if (_i_ > 3)
				render(_L_PAREN);
			render("char");
			if (_i_ > 3)
				render(_R_PAREN);
		}

	}

	private static void pp(lbnf.Absyn.ListIdent foo, int _i_) {
		ppListIdent(foo.iterator(), _i_);
	}

	private static void ppListIdent(java.util.Iterator<String> it, int _i_) {
		if (it.hasNext()) {
			String el = it.next();
			if (!it.hasNext()) { /* last */
				pp(el, _i_);
			} else { /* cons */
				pp(el, _i_);
				render(",");
				ppListIdent(it, _i_);
			}
		}
	}

	private static void sh(lbnf.Absyn.Grammar foo) {
		if (foo instanceof lbnf.Absyn.MkGrammar) {
			lbnf.Absyn.MkGrammar _mkgrammar = (lbnf.Absyn.MkGrammar) foo;
			render("(");
			render("MkGrammar");
			render("[");
			sh(_mkgrammar.listdef_);
			render("]");
			render(")");
		}
	}

	private static void sh(lbnf.Absyn.ListDef foo) {
		for (java.util.Iterator<lbnf.Absyn.Def> it = foo.iterator(); it.hasNext();) {
			sh(it.next());
			if (it.hasNext())
				render(",");
		}
	}

	private static void sh(lbnf.Absyn.ListItem foo) {
		for (java.util.Iterator<lbnf.Absyn.Item> it = foo.iterator(); it.hasNext();) {
			sh(it.next());
			if (it.hasNext())
				render(",");
		}
	}

	private static void sh(lbnf.Absyn.Def foo) {
		if (foo instanceof lbnf.Absyn.Rule) {
			lbnf.Absyn.Rule _rule = (lbnf.Absyn.Rule) foo;
			render("(");
			render("Rule");
			sh(_rule.label_);
			sh(_rule.cat_);
			render("[");
			sh(_rule.listitem_);
			render("]");
			render(")");
		}
		if (foo instanceof lbnf.Absyn.Comment) {
			lbnf.Absyn.Comment _comment = (lbnf.Absyn.Comment) foo;
			render("(");
			render("Comment");
			sh(_comment.string_);
			render(")");
		}
		if (foo instanceof lbnf.Absyn.Comments) {
			lbnf.Absyn.Comments _comments = (lbnf.Absyn.Comments) foo;
			render("(");
			render("Comments");
			sh(_comments.string_1);
			sh(_comments.string_2);
			render(")");
		}
		if (foo instanceof lbnf.Absyn.Internal) {
			lbnf.Absyn.Internal _internal = (lbnf.Absyn.Internal) foo;
			render("(");
			render("Internal");
			sh(_internal.label_);
			sh(_internal.cat_);
			render("[");
			sh(_internal.listitem_);
			render("]");
			render(")");
		}
		if (foo instanceof lbnf.Absyn.Token) {
			lbnf.Absyn.Token _token = (lbnf.Absyn.Token) foo;
			render("(");
			render("Token");
			sh(_token.ident_);
			sh(_token.reg_);
			render(")");
		}
		if (foo instanceof lbnf.Absyn.PosToken) {
			lbnf.Absyn.PosToken _postoken = (lbnf.Absyn.PosToken) foo;
			render("(");
			render("PosToken");
			sh(_postoken.ident_);
			sh(_postoken.reg_);
			render(")");
		}
		if (foo instanceof lbnf.Absyn.Entryp) {
			lbnf.Absyn.Entryp _entryp = (lbnf.Absyn.Entryp) foo;
			render("(");
			render("Entryp");
			render("[");
			sh(_entryp.listident_);
			render("]");
			render(")");
		}
		if (foo instanceof lbnf.Absyn.Separator) {
			lbnf.Absyn.Separator _separator = (lbnf.Absyn.Separator) foo;
			render("(");
			render("Separator");
			sh(_separator.minimumsize_);
			sh(_separator.cat_);
			sh(_separator.string_);
			render(")");
		}
		if (foo instanceof lbnf.Absyn.Terminator) {
			lbnf.Absyn.Terminator _terminator = (lbnf.Absyn.Terminator) foo;
			render("(");
			render("Terminator");
			sh(_terminator.minimumsize_);
			sh(_terminator.cat_);
			sh(_terminator.string_);
			render(")");
		}
		if (foo instanceof lbnf.Absyn.Coercions) {
			lbnf.Absyn.Coercions _coercions = (lbnf.Absyn.Coercions) foo;
			render("(");
			render("Coercions");
			sh(_coercions.ident_);
			sh(_coercions.integer_);
			render(")");
		}
		if (foo instanceof lbnf.Absyn.Rules) {
			lbnf.Absyn.Rules _rules = (lbnf.Absyn.Rules) foo;
			render("(");
			render("Rules");
			sh(_rules.ident_);
			render("[");
			sh(_rules.listrhs_);
			render("]");
			render(")");
		}
		if (foo instanceof lbnf.Absyn.Layout) {
			lbnf.Absyn.Layout _layout = (lbnf.Absyn.Layout) foo;
			render("(");
			render("Layout");
			render("[");
			sh(_layout.liststring_);
			render("]");
			render(")");
		}
		if (foo instanceof lbnf.Absyn.LayoutStop) {
			lbnf.Absyn.LayoutStop _layoutstop = (lbnf.Absyn.LayoutStop) foo;
			render("(");
			render("LayoutStop");
			render("[");
			sh(_layoutstop.liststring_);
			render("]");
			render(")");
		}
		if (foo instanceof lbnf.Absyn.LayoutTop) {
			lbnf.Absyn.LayoutTop _layouttop = (lbnf.Absyn.LayoutTop) foo;
			render("LayoutTop");
		}
	}

	private static void sh(lbnf.Absyn.Item foo) {
		if (foo instanceof lbnf.Absyn.Terminal) {
			lbnf.Absyn.Terminal _terminal = (lbnf.Absyn.Terminal) foo;
			render("(");
			render("Terminal");
			sh(_terminal.string_);
			render(")");
		}
		if (foo instanceof lbnf.Absyn.NTerminal) {
			lbnf.Absyn.NTerminal _nterminal = (lbnf.Absyn.NTerminal) foo;
			render("(");
			render("NTerminal");
			sh(_nterminal.cat_);
			render(")");
		}
	}

	private static void sh(lbnf.Absyn.Cat foo) {
		if (foo instanceof lbnf.Absyn.ListCat) {
			lbnf.Absyn.ListCat _listcat = (lbnf.Absyn.ListCat) foo;
			render("(");
			render("ListCat");
			sh(_listcat.cat_);
			render(")");
		}
		if (foo instanceof lbnf.Absyn.IdCat) {
			lbnf.Absyn.IdCat _idcat = (lbnf.Absyn.IdCat) foo;
			render("(");
			render("IdCat");
			sh(_idcat.ident_);
			render(")");
		}
	}

	private static void sh(lbnf.Absyn.Label foo) {
		if (foo instanceof lbnf.Absyn.LabNoP) {
			lbnf.Absyn.LabNoP _labnop = (lbnf.Absyn.LabNoP) foo;
			render("(");
			render("LabNoP");
			sh(_labnop.labelid_);
			render(")");
		}
		if (foo instanceof lbnf.Absyn.LabP) {
			lbnf.Absyn.LabP _labp = (lbnf.Absyn.LabP) foo;
			render("(");
			render("LabP");
			sh(_labp.labelid_);
			render("[");
			sh(_labp.listprofitem_);
			render("]");
			render(")");
		}
		if (foo instanceof lbnf.Absyn.LabPF) {
			lbnf.Absyn.LabPF _labpf = (lbnf.Absyn.LabPF) foo;
			render("(");
			render("LabPF");
			sh(_labpf.labelid_1);
			sh(_labpf.labelid_2);
			render("[");
			sh(_labpf.listprofitem_);
			render("]");
			render(")");
		}
		if (foo instanceof lbnf.Absyn.LabF) {
			lbnf.Absyn.LabF _labf = (lbnf.Absyn.LabF) foo;
			render("(");
			render("LabF");
			sh(_labf.labelid_1);
			sh(_labf.labelid_2);
			render(")");
		}
	}

	private static void sh(lbnf.Absyn.LabelId foo) {
		if (foo instanceof lbnf.Absyn.Id) {
			lbnf.Absyn.Id _id = (lbnf.Absyn.Id) foo;
			render("(");
			render("Id");
			sh(_id.ident_);
			render(")");
		}
		if (foo instanceof lbnf.Absyn.Wild) {
			lbnf.Absyn.Wild _wild = (lbnf.Absyn.Wild) foo;
			render("Wild");
		}
		if (foo instanceof lbnf.Absyn.ListE) {
			lbnf.Absyn.ListE _liste = (lbnf.Absyn.ListE) foo;
			render("ListE");
		}
		if (foo instanceof lbnf.Absyn.ListCons) {
			lbnf.Absyn.ListCons _listcons = (lbnf.Absyn.ListCons) foo;
			render("ListCons");
		}
		if (foo instanceof lbnf.Absyn.ListOne) {
			lbnf.Absyn.ListOne _listone = (lbnf.Absyn.ListOne) foo;
			render("ListOne");
		}
	}

	private static void sh(lbnf.Absyn.ProfItem foo) {
		if (foo instanceof lbnf.Absyn.ProfIt) {
			lbnf.Absyn.ProfIt _profit = (lbnf.Absyn.ProfIt) foo;
			render("(");
			render("ProfIt");
			render("[");
			sh(_profit.listintlist_);
			render("]");
			render("[");
			sh(_profit.listinteger_);
			render("]");
			render(")");
		}
	}

	private static void sh(lbnf.Absyn.IntList foo) {
		if (foo instanceof lbnf.Absyn.Ints) {
			lbnf.Absyn.Ints _ints = (lbnf.Absyn.Ints) foo;
			render("(");
			render("Ints");
			render("[");
			sh(_ints.listinteger_);
			render("]");
			render(")");
		}
	}

	private static void sh(lbnf.Absyn.ListInteger foo) {
		for (java.util.Iterator<Integer> it = foo.iterator(); it.hasNext();) {
			sh(it.next());
			if (it.hasNext())
				render(",");
		}
	}

	private static void sh(lbnf.Absyn.ListIntList foo) {
		for (java.util.Iterator<lbnf.Absyn.IntList> it = foo.iterator(); it.hasNext();) {
			sh(it.next());
			if (it.hasNext())
				render(",");
		}
	}

	private static void sh(lbnf.Absyn.ListProfItem foo) {
		for (java.util.Iterator<lbnf.Absyn.ProfItem> it = foo.iterator(); it.hasNext();) {
			sh(it.next());
			if (it.hasNext())
				render(",");
		}
	}

	private static void sh(lbnf.Absyn.ListString foo) {
		for (java.util.Iterator<String> it = foo.iterator(); it.hasNext();) {
			sh(it.next());
			if (it.hasNext())
				render(",");
		}
	}

	private static void sh(lbnf.Absyn.ListRHS foo) {
		for (java.util.Iterator<lbnf.Absyn.RHS> it = foo.iterator(); it.hasNext();) {
			sh(it.next());
			if (it.hasNext())
				render(",");
		}
	}

	private static void sh(lbnf.Absyn.RHS foo) {
		if (foo instanceof lbnf.Absyn.MkRHS) {
			lbnf.Absyn.MkRHS _mkrhs = (lbnf.Absyn.MkRHS) foo;
			render("(");
			render("MkRHS");
			render("[");
			sh(_mkrhs.listitem_);
			render("]");
			render(")");
		}
	}

	private static void sh(lbnf.Absyn.MinimumSize foo) {
		if (foo instanceof lbnf.Absyn.MNonempty) {
			lbnf.Absyn.MNonempty _mnonempty = (lbnf.Absyn.MNonempty) foo;
			render("MNonempty");
		}
		if (foo instanceof lbnf.Absyn.MEmpty) {
			lbnf.Absyn.MEmpty _mempty = (lbnf.Absyn.MEmpty) foo;
			render("MEmpty");
		}
	}

	private static void sh(lbnf.Absyn.Reg foo) {
		if (foo instanceof lbnf.Absyn.RSeq) {
			lbnf.Absyn.RSeq _rseq = (lbnf.Absyn.RSeq) foo;
			render("(");
			render("RSeq");
			sh(_rseq.reg_1);
			sh(_rseq.reg_2);
			render(")");
		}
		if (foo instanceof lbnf.Absyn.RAlt) {
			lbnf.Absyn.RAlt _ralt = (lbnf.Absyn.RAlt) foo;
			render("(");
			render("RAlt");
			sh(_ralt.reg_1);
			sh(_ralt.reg_2);
			render(")");
		}
		if (foo instanceof lbnf.Absyn.RMinus) {
			lbnf.Absyn.RMinus _rminus = (lbnf.Absyn.RMinus) foo;
			render("(");
			render("RMinus");
			sh(_rminus.reg_1);
			sh(_rminus.reg_2);
			render(")");
		}
		if (foo instanceof lbnf.Absyn.RStar) {
			lbnf.Absyn.RStar _rstar = (lbnf.Absyn.RStar) foo;
			render("(");
			render("RStar");
			sh(_rstar.reg_);
			render(")");
		}
		if (foo instanceof lbnf.Absyn.RPlus) {
			lbnf.Absyn.RPlus _rplus = (lbnf.Absyn.RPlus) foo;
			render("(");
			render("RPlus");
			sh(_rplus.reg_);
			render(")");
		}
		if (foo instanceof lbnf.Absyn.ROpt) {
			lbnf.Absyn.ROpt _ropt = (lbnf.Absyn.ROpt) foo;
			render("(");
			render("ROpt");
			sh(_ropt.reg_);
			render(")");
		}
		if (foo instanceof lbnf.Absyn.REps) {
			lbnf.Absyn.REps _reps = (lbnf.Absyn.REps) foo;
			render("REps");
		}
		if (foo instanceof lbnf.Absyn.RChar) {
			lbnf.Absyn.RChar _rchar = (lbnf.Absyn.RChar) foo;
			render("(");
			render("RChar");
			sh(_rchar.char_);
			render(")");
		}
		if (foo instanceof lbnf.Absyn.RAlts) {
			lbnf.Absyn.RAlts _ralts = (lbnf.Absyn.RAlts) foo;
			render("(");
			render("RAlts");
			sh(_ralts.string_);
			render(")");
		}
		if (foo instanceof lbnf.Absyn.RSeqs) {
			lbnf.Absyn.RSeqs _rseqs = (lbnf.Absyn.RSeqs) foo;
			render("(");
			render("RSeqs");
			sh(_rseqs.string_);
			render(")");
		}
		if (foo instanceof lbnf.Absyn.RDigit) {
			lbnf.Absyn.RDigit _rdigit = (lbnf.Absyn.RDigit) foo;
			render("RDigit");
		}
		if (foo instanceof lbnf.Absyn.RLetter) {
			lbnf.Absyn.RLetter _rletter = (lbnf.Absyn.RLetter) foo;
			render("RLetter");
		}
		if (foo instanceof lbnf.Absyn.RUpper) {
			lbnf.Absyn.RUpper _rupper = (lbnf.Absyn.RUpper) foo;
			render("RUpper");
		}
		if (foo instanceof lbnf.Absyn.RLower) {
			lbnf.Absyn.RLower _rlower = (lbnf.Absyn.RLower) foo;
			render("RLower");
		}
		if (foo instanceof lbnf.Absyn.RAny) {
			lbnf.Absyn.RAny _rany = (lbnf.Absyn.RAny) foo;
			render("RAny");
		}
	}

	private static void sh(lbnf.Absyn.ListIdent foo) {
		for (java.util.Iterator<String> it = foo.iterator(); it.hasNext();) {
			sh(it.next());
			if (it.hasNext())
				render(",");
		}
	}

	private static void pp(Integer n, int _i_) {
		buf_.append(n);
		buf_.append(" ");
	}

	private static void pp(Double d, int _i_) {
		buf_.append(String.format(java.util.Locale.ROOT, "%.15g ", d));
	}

	private static void pp(String s, int _i_) {
		buf_.append(s);
		buf_.append(" ");
	}

	private static void pp(Character c, int _i_) {
		buf_.append("'" + escape(c.toString()) + "'");
		buf_.append(" ");
	}

	private static void sh(Integer n) {
		render(n.toString());
	}

	private static void sh(Double d) {
		render(String.format(java.util.Locale.ROOT, "%.15g", d));
	}

	private static void sh(Character c) {
		render("'" + escape(c.toString()) + "'");
	}

	private static void sh(String s) {
		printQuoted(s);
	}

	private static void printQuoted(String s) {
		render("\"" + escape(s) + "\"");
	}

	public static String escape(String s) {
		if (s == null)
			return null;
		return s.replace("\\", "\\\\").replace("\t", "\\t").replace("\b", "\\b").replace("\n", "\\n")
				.replace("\r", "\\r").replace("\f", "\\f").replace("\"", "\\\"");
	}

	private static void indent() {
		int n = _n_;
		while (n > 0) {
			buf_.append(' ');
			n--;
		}
	}

	private static void backup() {
		int prev = buf_.length() - 1;
		if (prev >= 0 && buf_.charAt(prev) == ' ')
			buf_.setLength(prev);
	}

	private static void trim() {
		// Trim initial spaces
		int end = 0;
		int len = buf_.length();
		while (end < len && buf_.charAt(end) == ' ')
			end++;
		buf_.delete(0, end);
		// Trim trailing spaces
		removeTrailingSpaces();
	}

	private static void removeTrailingSpaces() {
		int end = buf_.length();
		while (end > 0 && buf_.charAt(end - 1) == ' ')
			end--;
		buf_.setLength(end);
	}

	private static void removeTrailingWhitespace() {
		int end = buf_.length();
		while (end > 0 && (buf_.charAt(end - 1) == ' ' || buf_.charAt(end - 1) == '\n'))
			end--;
		buf_.setLength(end);
	}

	private static void onEmptyLine() {
		removeTrailingSpaces();
		int len = buf_.length();
		if (len > 0 && buf_.charAt(len - 1) != '\n')
			buf_.append("\n");
		indent();
	}

	private static int _n_ = 0;
	private static StringBuilder buf_ = new StringBuilder(INITIAL_BUFFER_SIZE);
}
